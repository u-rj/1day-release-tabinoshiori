(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _methods;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var socket = io.connect('http://localhost:18010');
socket.on('connect', function () {
  console.log('connected');
});

/*
socket.on('out_create_plan', (data) => {
  console.log(data.plan_id) // 1fCnEVwyKWVsPkNEb6yCkEJCShd_2k2mcfmnyav7G8zI
})
socket.emit('in_create_plan', {
  title: '北海道旅行',
  description: '',
  date: moment().format('YYYY-MM-DD')
})
*/

new Vue({
  el: '#container',
  data: {
    plan: {
      'plan_id': '1fCnEVwyKWVsPkNEb6yCkEJCShd_2k2mcfmnyav7G8zI', // base58 44文字
      'title': '北海道旅行',
      'date': '2018-07-29',
      'description': '2泊3日',
      'timeline': [[// 1日目
      {
        'title': 'JetStarに乗る',
        'start_time': '13:00',
        'end_time': '15:00',
        'place': '羽田空港第二ターミナル',
        'price': '9800',
        'description': 'チェックインは1時間前'
      }, {
        'title': 'test',
        'start_time': '13:00',
        'end_time': '15:00',
        'place': '羽田空港第二ターミナル',
        'price': '9800',
        'description': 'チェックインは1時間前'
      }], [// 2日目
      {
        'title': '旭山動物園に行く',
        'start_time': '9:00',
        'end_time': '11:00',
        'place': '旭山動物園',
        'price': '2000', // nullを許容
        'description': '朝食は9:00まで'
      }]]
    },
    active_day: 0,
    active_task: 1,
    planId: '',
    editMode: false
  },
  mounted: function mounted() {
    this.getUrlData();
    this.setSocketOn();
    this.loadPlan();
    this.savePlan();
  },

  methods: (_methods = {
    getUrlData: function getUrlData() {
      this.planId = url('?plan_id');
      if (!this.planId) {
        alert('error');
        return;
      }
      this.editMode = url('?edit') === '1';
      console.log(this.planId, this.editMode);
    },
    setSocketOn: function setSocketOn() {
      var _this = this;

      socket.on('out_load_plan', function (data) {
        if (!data.plan) {
          alert('データの読み込みに失敗しました');
          return;
        }
        console.log(data.plan);
        _this.plan = data.plan;
      });

      socket.on('out_save_plan', function (data) {
        if (data.status === 'Failure') {
          alert(data.message);
          return;
        }

        _this.loadPlan();
      });
    },
    loadPlan: function loadPlan() {
      socket.emit('in_load_plan', { plan_id: this.planId });
    },
    savePlan: function savePlan() {
      var _this2 = this;

      setTimeout(function () {
        _this2.plan.title += '2';
        socket.emit('in_save_plan', { plan: _this2.plan });
      }, 1000);
    },
    addTask: function addTask(task) {
      this.task.push(task);
      socket.emit('', task);
    }
  }, _defineProperty(_methods, 'addTask', function addTask(task) {
    this.task.push(task);
    socket.emit('', task);
  }), _defineProperty(_methods, 'activeTask', function activeTask(index) {
    this.active_task = index;
  }), _defineProperty(_methods, 'isActiveTask', function isActiveTask(index) {
    console.log(this.active_task, index);
    if (this.active_task == index) {
      return true;
    } else {
      return false;
    }
  }), _defineProperty(_methods, 'isActiveDay', function isActiveDay(index) {
    console.log(this.active_day, index);
    if (this.active_day == index) {
      return true;
    } else {
      return false;
    }
  }), _defineProperty(_methods, 'getDate', function getDate(index) {
    var date = new Date(this.date);
    date.setDate(date.getDate() + index);
    console.log('getDate', date);
    return date.getMonth() + 1 + '月' + date.getDate() + '日';
  }), _methods)
});

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
